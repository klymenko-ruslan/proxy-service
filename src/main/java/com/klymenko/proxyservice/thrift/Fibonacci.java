/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.klymenko.proxyservice.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.scrooge.TReusableBuffer;
import com.twitter.scrooge.TReusableMemoryTransport;
import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ClientDeserializeCtx;
import com.twitter.finagle.thrift.ServerToReqRep;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class Fibonacci {
    public interface Iface {
        public List<Long> calculate(long data) throws TException;
    }

    public interface AsyncIface {
        public void calculate(long data, AsyncMethodCallback<List<Long>> resultHandler) throws TException;
    }

    public interface ServiceIface {
        public Future<List<Long>> calculate(long data);
    }

    public static class Client extends TServiceClient implements Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot)
        {
            this(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            super(iprot, oprot);
        }

        public List<Long> calculate(long data) throws TException
        {
            send_calculate(data);
            return recv_calculate();
        }

        public void send_calculate(long data) throws TException
        {
            oprot_.writeMessageBegin(new TMessage("calculate", TMessageType.CALL, ++seqid_));
            calculate_args __args__ = new calculate_args();
            __args__.setData(data);
            __args__.write(oprot_);
            oprot_.writeMessageEnd();
            oprot_.getTransport().flush();
        }

        public List<Long> recv_calculate() throws TException
        {
            TMessage msg = iprot_.readMessageBegin();
            if (msg.type == TMessageType.EXCEPTION) {
                TApplicationException x = TApplicationException.readFrom(iprot_);
                iprot_.readMessageEnd();
                throw x;
            }
            if (msg.seqid != seqid_) {
                throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "calculate failed: out of sequence response");
            }
            calculate_result result = new calculate_result();
            result.read(iprot_);
            iprot_.readMessageEnd();
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "calculate failed: unknown result");
        }
    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private final TAsyncClientManager clientManager;
            private final TProtocolFactory protocolFactory;
            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        private final TNonblockingTransport transport;
        private final TAsyncClientManager manager;

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
            this.manager = clientManager;
            this.transport = transport;
        }

        public void calculate(long data, AsyncMethodCallback<List<Long>> __resultHandler__) throws TException {
            checkReady();
            calculate_call __method_call__ = new calculate_call(data, __resultHandler__, this, super.getProtocolFactory(), this.transport);
            this.manager.call(__method_call__);
        }

        public static class calculate_call extends TAsyncMethodCall<List<Long>> {
            private long data;

            public calculate_call(long data, AsyncMethodCallback<List<Long>> __resultHandler__, TAsyncClient __client__, TProtocolFactory __protocolFactory__, TNonblockingTransport __transport__) throws TException {
                super(__client__, __protocolFactory__, __transport__, __resultHandler__, false);
                this.data = data;
            }

            public void write_args(TProtocol __prot__) throws TException {
                __prot__.writeMessageBegin(new TMessage("calculate", TMessageType.CALL, 0));
                calculate_args __args__ = new calculate_args();
                __args__.setData(data);
                __args__.write(__prot__);
                __prot__.writeMessageEnd();
            }

            protected List<Long> getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol __prot__ = super.client.getProtocolFactory().getProtocol(__memoryTransport__);
                return (new Client(__prot__)).recv_calculate();
            }
        }
    }


    public static class ServiceToClient implements ServiceIface {
        private final com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
        private final TProtocolFactory protocolFactory;
        private final TReusableBuffer tlReusableBuffer;
        private final scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier;

        /**
         * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
         */
        @Deprecated
        public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory, scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier) {
            this(service, com.twitter.finagle.thrift.RichClientParam.apply(protocolFactory, responseClassifier));
        }

        public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, com.twitter.finagle.thrift.RichClientParam clientParam) {

            this.service = service;
            this.protocolFactory = clientParam.restrictedProtocolFactory();
            this.responseClassifier = clientParam.responseClassifier();
            this.tlReusableBuffer = clientParam.createThriftReusableBuffer();
        }

        public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service) {
            this(service, com.twitter.finagle.thrift.RichClientParam.apply());
        }

        /**
         * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
         */
        @Deprecated
        public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
            this(service, com.twitter.finagle.thrift.RichClientParam.apply(protocolFactory, com.twitter.finagle.service.ResponseClassifier.Default()));
        }

        public Future<List<Long>> calculate(long data) {
            try {
                TReusableMemoryTransport __memoryTransport__ = tlReusableBuffer.get();
                TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
                __prot__.writeMessageBegin(new TMessage("calculate", TMessageType.CALL, 0));
                calculate_args __args__ = new calculate_args();
                __args__.setData(data);

                Function<byte[], Try<List<Long>>> replyDeserializer =
                        new Function<byte[], Try<List<Long>>>() {
                            public Try<List<Long>> apply(byte[] __buffer__) {
                                TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                                TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                                try {
                                    return new Return<List<Long>>(((new Client(__prot__)).recv_calculate()));
                                } catch (Exception e) {
                                    return new Throw<List<Long>>(e);
                                }
                            }
                        };

                ClientDeserializeCtx<List<Long>> serdeCtx = new ClientDeserializeCtx<>(__args__, replyDeserializer);
                return com.twitter.finagle.context.Contexts.local().let(
                        ClientDeserializeCtx.Key(),
                        serdeCtx,
                        new com.twitter.util.ExceptionalFunction0<Future<List<Long>>>() {
                            public Future<List<Long>> applyE() throws TException {
                                serdeCtx.rpcName("calculate");
                                long start = System.nanoTime();
                                __args__.write(__prot__);
                                __prot__.writeMessageEnd();
                                serdeCtx.serializationTime(System.nanoTime() - start);

                                byte[] __buffer__ = Arrays.copyOf(__memoryTransport__.getArray(), __memoryTransport__.length());
                                final ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);

                                Future<byte[]> __done__ = service.apply(__request__);
                                return __done__.flatMap(new Function<byte[], Future<List<Long>>>() {
                                    public Future<List<Long>> apply(byte[] __buffer__) {
                                        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                                        TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                                        try {
                                            return Future.value((new Client(__prot__)).recv_calculate());
                                        } catch (Exception e) {
                                            return Future.exception(e);
                                        }
                                    }
                                });
                            }
                        });
            } catch (TException e) {
                return Future.exception(e);
            } finally {
                tlReusableBuffer.reset();
            }
        }
    }

    public static class Processor implements TProcessor {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_.put("calculate", new calculate());
        }

        protected static interface ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
        }

        private Iface iface_;
        protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

        public boolean process(TProtocol iprot, TProtocol oprot) throws TException
        {
            TMessage msg = iprot.readMessageBegin();
            ProcessFunction fn = processMap_.get(msg.name);
            if (fn == null) {
                TProtocolUtil.skip(iprot, TType.STRUCT);
                iprot.readMessageEnd();
                TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
                oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                x.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
                return true;
            }
            fn.process(msg.seqid, iprot, oprot);
            return true;
        }

        private class calculate implements ProcessFunction {
            public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
            {
                calculate_args args = new calculate_args();
                try {
                    args.read(iprot);
                } catch (TProtocolException e) {
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
                    oprot.writeMessageBegin(new TMessage("calculate", TMessageType.EXCEPTION, seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return;
                }
                iprot.readMessageEnd();
                calculate_result result = new calculate_result();
                result.success = iface_.calculate(args.data);

                oprot.writeMessageBegin(new TMessage("calculate", TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
            }
        }
    }

    public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
        private final ServiceIface iface;
        private final com.twitter.finagle.Filter.TypeAgnostic filters;
        private final TProtocolFactory protocolFactory;
        private final String serviceName;
        private final TReusableBuffer tlReusableBuffer;
        protected HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>> serviceMap =
                new HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>>();
        public Service(final ServiceIface iface, final com.twitter.finagle.Filter.TypeAgnostic filters, final com.twitter.finagle.thrift.RichServerParam serverParam) {
            this.iface = iface;
            this.filters = filters;
            this.protocolFactory = serverParam.restrictedProtocolFactory();
            this.serviceName = serverParam.serviceName();
            this.tlReusableBuffer = new TReusableBuffer(512, serverParam.maxThriftBufferSize());
            createMethods();
        }

        public Service(final ServiceIface iface, final com.twitter.finagle.thrift.RichServerParam serverParam) {
            this(iface, com.twitter.finagle.Filter.typeAgnosticIdentity(), serverParam);
        }

        public Service(final ServiceIface iface) {
            this(iface, new com.twitter.finagle.thrift.RichServerParam());
        }

        /**
         * @deprecated use {@link com.twitter.finagle.thrift.RichServerParam} instead
         */
        @Deprecated
        public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
            this(iface, new com.twitter.finagle.thrift.RichServerParam(protocolFactory));
        }

        private void createMethods() {

            class calculateService {
                private final com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]> protocolExnFilter = new com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]>() {
                    @Override
                    public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> service) {
                        return service.apply(request).rescue(new Function<Throwable, Future<byte[]>>() {
                            @Override
                            public Future<byte[]> apply(Throwable e) {
                                TProtocol iprot = request._1();
                                Integer seqid = request._2();
                                if (e instanceof TProtocolException) {
                                    try {
                                        iprot.readMessageEnd();
                                        setReqRepContext(request, new Throw(new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage())));
                                        return exception("calculate", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage());
                                    } catch (Exception e1) {
                                        setReqRepContext(request, new Throw(e1));
                                        return Future.exception(e1);
                                    }
                                } else {
                                    setReqRepContext(request, new Throw(e));
                                    return Future.exception(e);
                                }
                            }
                        });
                    }
                };

                private final com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], calculate_args, List<Long>> serdeFilter = new com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], calculate_args, List<Long>>() {
                    @Override
                    public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<calculate_args, List<Long>> service) {
                        TProtocol iprot = request._1();
                        Integer seqid = request._2();
                        calculate_args args = new calculate_args();

                        try {
                            long start = System.nanoTime();
                            args.read(iprot);
                            iprot.readMessageEnd();
                            com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime() - start);
                        } catch (Exception e) {
                            return Future.exception(e);
                        }

                        Future<List<Long>> res = com.twitter.finagle.context.Contexts.local().let(
                                com.twitter.finagle.thrift.MethodMetadata.Key(),
                                new com.twitter.finagle.thrift.MethodMetadata(
                                        "calculate",
                                        serviceName,
                                        calculate_args.class,
                                        calculate_result.class),
                                new scala.runtime.AbstractFunction0<Future<List<Long>>>() {
                                    @Override
                                    public Future<List<Long>> apply() {
                                        return service.apply(args);
                                    }
                                });
                        calculate_result result = new calculate_result();
                        return res.flatMap(new Function<List<Long>, Future<byte[]>>() {
                            @Override
                            public Future<byte[]> apply(List<Long> value) {
                                result.success = value;
                                result.setSuccessIsSet(true);
                                setReqRepContext(args, new Return(value));
                                return reply("calculate", seqid, result);
                            }
                        }).rescue(new Function<Throwable, Future<byte[]>>() {
                            @Override
                            public Future<byte[]> apply(Throwable t) {
                                setReqRepContext(args, new Throw(t));
                                return Future.exception(t);
                            }
                        });
                    }
                };

                private final com.twitter.finagle.Service<calculate_args, List<Long>> methodService = new com.twitter.finagle.Service<calculate_args, List<Long>>() {
                    @Override
                    public Future<List<Long>> apply(calculate_args args) {
                        Future<List<Long>> future = iface.calculate(args.data);
                        return future;
                    }
                };

                private final com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> getService =
                        protocolExnFilter.andThen(serdeFilter).andThen(filters.toFilter()).andThen(methodService);
            }

            serviceMap.put("calculate", (new calculateService()).getService);
        }

        private void setReqRepContext(Object req, Try<Object> rep) {
            scala.Option<ServerToReqRep> serdeCtx = com.twitter.finagle.context.Contexts.local().get(ServerToReqRep.Key());
            if (serdeCtx.nonEmpty()) {
                serdeCtx.get().setReqRep(new com.twitter.finagle.service.ReqRep(req, rep));
            }
        }

        public Future<byte[]> apply(byte[] request) {
            TTransport inputTransport = new TMemoryInputTransport(request);
            TProtocol iprot = protocolFactory.getProtocol(inputTransport);

            TMessage msg;
            try {
                msg = iprot.readMessageBegin();
            } catch (Exception e) {
                return Future.exception(e);
            }

            com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> svc = serviceMap.get(msg.name);
            if (svc == null) {
                try {
                    TProtocolUtil.skip(iprot, TType.STRUCT);
                    iprot.readMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
                    TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
                    TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
                    oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
                    x.write(oprot);
                    oprot.writeMessageEnd();
                    oprot.getTransport().flush();
                    return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
                } catch (Exception e) {
                    return Future.exception(e);
                } finally {
                    tlReusableBuffer.reset();
                }
            }

            return svc.apply(new scala.Tuple2(iprot, msg.seqid));
        }

        private Future<byte[]> reply(String name, Integer seqid, TBase result) {
            try {
                long start = System.nanoTime();
                TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
                TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid));
                result.write(oprot);
                oprot.writeMessageEnd();
                com.twitter.finagle.tracing.Trace.recordBinary("srv/response_serialization_ns", System.nanoTime() - start);

                return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
            } catch (Exception e) {
                return Future.exception(e);
            } finally {
                tlReusableBuffer.reset();
            }
        }

        private Future<byte[]> exception(String name, Integer seqid, Integer code, String message) {
            try {
                TApplicationException x = new TApplicationException(code, message);
                TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
                TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid));
                x.write(oprot);
                oprot.writeMessageEnd();
                oprot.getTransport().flush();
                byte[] buffer = Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length());
                return Future.value(buffer);
            } catch (Exception e1) {
                return Future.exception(e1);
            } finally {
                tlReusableBuffer.reset();
            }
        }
    }

    public static class calculate_args implements TBase<calculate_args, calculate_args._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("calculate_args");

        private static final TField DATA_FIELD_DESC = new TField("data", TType.I64, (short)1);


        public long data;

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            DATA((short)1, "data");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DATA
                        return DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments
        private static final int __DATA_ISSET_ID = 0;
        private final BitSet __isset_bit_vector = new BitSet(1);

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        /**
         * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
         * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
         * declared as binary in the idl file.
         */
        public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;

        private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
            binaryFieldValues.add(f);
            return f;
        }

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
            tmpMap.put(_Fields.DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
            FieldMetaData.addStructMetaDataMap(calculate_args.class, metaDataMap);
        }

        /**
         * Returns a map of the annotations and their values for this struct declaration.
         * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
         * or enum values.
         */
        public static final Map<String, String> structAnnotations;
        static {
            structAnnotations = Collections.emptyMap();
        }

        /**
         * Returns a map of the annotations for each of this struct's fields, keyed by the field.
         * See structAnnotations for the annotations attached to this struct's declaration.
         */
        public static final Map<_Fields, Map<String, String>> fieldAnnotations;
        static {
            fieldAnnotations = Collections.emptyMap();
        }

        /**
         * Returns the set of fields that have a configured default value.
         * The default values for these fields can be obtained by
         * instantiating this class with the default constructor.
         */
        public static final Set<_Fields> hasDefaultValue;
        static {
            Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
            hasDefaultValue = Collections.unmodifiableSet(tmp);
        }


        public calculate_args() {
        }

        public calculate_args(
                long data)
        {
            this();
            this.data = data;
            setDataIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public calculate_args(calculate_args other) {
            __isset_bit_vector.clear();
            __isset_bit_vector.or(other.__isset_bit_vector);
            this.data = other.data;
        }

        public static List<String> validateNewInstance(calculate_args item) {
            final List<String> buf = new ArrayList<String>();

            return buf;
        }

        public calculate_args deepCopy() {
            return new calculate_args(this);
        }

        @Override
        public void clear() {
            setDataIsSet(false);
            this.data = 0;
        }

        public long getData() {
            return this.data;
        }

        public calculate_args setData(long data) {
            this.data = data;
            setDataIsSet(true);

            return this;
        }

        public void unsetData() {
            __isset_bit_vector.clear(__DATA_ISSET_ID);
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return __isset_bit_vector.get(__DATA_ISSET_ID);
        }

        public void setDataIsSet(boolean value) {
            __isset_bit_vector.set(__DATA_ISSET_ID, value);
        }

        @SuppressWarnings("unchecked")
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((Long)value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DATA:
                    return Long.valueOf(getData());
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DATA:
                    return isSetData();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof calculate_args)
                return this.equals((calculate_args)that);
            return false;
        }

        public boolean equals(calculate_args that) {
            if (that == null)
                return false;
            boolean this_present_data = true;
            boolean that_present_data = true;
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (this.data != that.data)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;
            {
                hashCode = 31 * hashCode + ((Long)data).hashCode();
            }
            return hashCode;
        }

        public int compareTo(calculate_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            calculate_args typedOther = (calculate_args)other;

            lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = TBaseHelper.compareTo(this.data, typedOther.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true)
            {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 1: // DATA
                        if (field.type == TType.I64) {
                            this.data = iprot.readI64();
                            setDataIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(DATA_FIELD_DESC);
            oprot.writeI64(this.data);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("calculate_args(");
            boolean first = true;
            sb.append("data:");
            sb.append(this.data);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }


    public static class calculate_result implements TBase<calculate_result, calculate_result._Fields>, java.io.Serializable, Cloneable {
        private static final TStruct STRUCT_DESC = new TStruct("calculate_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);


        public List<Long> success;

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }


        // isset id assignments

        public static final Map<_Fields, FieldMetaData> metaDataMap;

        /**
         * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
         * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
         * declared as binary in the idl file.
         */
        public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;

        private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
            binaryFieldValues.add(f);
            return f;
        }

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new ListMetaData(TType.LIST,
                            new FieldValueMetaData(TType.I64))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
            FieldMetaData.addStructMetaDataMap(calculate_result.class, metaDataMap);
        }

        /**
         * Returns a map of the annotations and their values for this struct declaration.
         * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
         * or enum values.
         */
        public static final Map<String, String> structAnnotations;
        static {
            structAnnotations = Collections.emptyMap();
        }

        /**
         * Returns a map of the annotations for each of this struct's fields, keyed by the field.
         * See structAnnotations for the annotations attached to this struct's declaration.
         */
        public static final Map<_Fields, Map<String, String>> fieldAnnotations;
        static {
            fieldAnnotations = Collections.emptyMap();
        }

        /**
         * Returns the set of fields that have a configured default value.
         * The default values for these fields can be obtained by
         * instantiating this class with the default constructor.
         */
        public static final Set<_Fields> hasDefaultValue;
        static {
            Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
            hasDefaultValue = Collections.unmodifiableSet(tmp);
        }


        public calculate_result() {
        }

        public calculate_result(
                List<Long> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public calculate_result(calculate_result other) {
            if (other.isSetSuccess()) {
                List<Long> __this__success = new ArrayList<Long>();
                for (Long other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public static List<String> validateNewInstance(calculate_result item) {
            final List<String> buf = new ArrayList<String>();

            return buf;
        }

        public calculate_result deepCopy() {
            return new calculate_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Long> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(long elem) {
            if (this.success == null) {
                this.success = new ArrayList<Long>();
            }
            this.success.add(elem);
        }

        public List<Long> getSuccess() {
            return this.success;
        }

        public calculate_result setSuccess(List<Long> success) {
            this.success = success;

            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @SuppressWarnings("unchecked")
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Long>)value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof calculate_result)
                return this.equals((calculate_result)that);
            return false;
        }

        public boolean equals(calculate_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;
            if (isSetSuccess()) {
                hashCode = 31 * hashCode + success.hashCode();
            }
            return hashCode;
        }

        public int compareTo(calculate_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            calculate_result typedOther = (calculate_result)other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }


        public void read(TProtocol iprot) throws TException {
            TField field;
            iprot.readStructBegin();
            while (true)
            {
                field = iprot.readFieldBegin();
                if (field.type == TType.STOP) {
                    break;
                }
                switch (field.id) {
                    case 0: // SUCCESS
                        if (field.type == TType.LIST) {
                            {
                                TList _list0 = iprot.readListBegin();
                                this.success = new ArrayList<Long>(_list0.size);
                                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                                {
                                    long _elem2;
                                    _elem2 = iprot.readI64();
                                    this.success.add(_elem2);
                                }
                                iprot.readListEnd();
                            }
                        } else {
                            TProtocolUtil.skip(iprot, field.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, field.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            validate();
        }

        public void write(TProtocol oprot) throws TException {
            oprot.writeStructBegin(STRUCT_DESC);
            if (this.isSetSuccess()) {
                oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                {
                    oprot.writeListBegin(new TList(TType.I64, this.success.size()));
                    for (long _iter3 : this.success)
                    {
                        oprot.writeI64(_iter3);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("calculate_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
        }
    }



}
